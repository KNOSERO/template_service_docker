@Library('jenkins_shared_lib') _

pipeline {
    agent {
        label 'k3s'
    }
    options {
        skipDefaultCheckout();
        timestamps();
        ansiColor('xterm')
    }
    environment {
        DEFAULT_BRANCH = 'master'
        CREDITS_ID = 'github-token'
        SECRET_WEBHOOK = 'github-secret-webhook'
    }
    stages {
        stage('Init ENV') {
            steps {
                script {
                    initEnv()
                }
            }
        }

        stage('Configure Triggers') {
            steps {
                script {
                    configureTriggers()
                }
            }
        }

        stage('Checkout') {
            parallel {
                stage('Checkout PR') {
                    when { expression { (env.PR_ACTION in ['opened','reopened','synchronize']) && env.PR_NUMBER }}
                    steps {
                        checkoutPullRequest()
                    }
                }

                stage('Checkout Manual') {
                    when { not { expression { env.PR_ACTION in ['opened','reopened','synchronize'] } } }
                    steps {
                        checkoutBranch("*/${env.DEFAULT_BRANCH}")
                    }
                }
            }
        }

        stage('Init') {
            parallel {
                stage('Init Pipeline Status') {
                    when { expression { (env.PR_ACTION in ['opened','reopened','synchronize']) && env.PR_NUMBER }}
                    steps {
                        script {
                            githubWebhook('PENDING', 'Pipeline started')
                        }
                    }
                }

                stage('Init Submodules') {
                    steps {
                        script {
                            sh '''
                                git config --global url."https://github.com/".insteadOf "git@github.com:"
                                git submodule sync --recursive
                                git submodule update --init --recursive --remote
                            '''
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh '''
                        bash ./docker/validate_docker.sh
                    '''
                }
            }
        }
    }
    post {
        success {
            script {
                githubWebhook('SUCCESS', 'All stages passed ✅')
            }
        }
        failure {
            script {
                githubWebhook('FAILURE', 'Pipeline failed ❌')
            }
        }
    }
}